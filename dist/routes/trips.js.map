{"version":3,"sources":["../../server/routes/trips.js"],"names":["tripRouter","express","Router","post","createTripValidate","verifyToken","req","res","body","userDetails","tripDetails","is_admin","dateFromInput","tripDate","timeFromInput","tripTime","dateParts","split","timeParts","date","Date","then","catch","id","params","convertTripId","parseInt","result","length","status"],"mappings":"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","file":"trips.js","sourcesContent":["import express from 'express';\nimport { createTripValidate, verifyToken, isPositiveInteger } from '../helpers/validators';\nimport { createTrip, cancelTrip, getTrip } from '../crud/db';\nimport sendResponse from '../helpers/response';\n\nconst tripRouter = express.Router();\n\ntripRouter.post('/', createTripValidate, verifyToken, (req, res) => {\n  const { userDetails, tripDetails } = req.body;\n  if (typeof userDetails[0].is_admin === 'undefined') {\n    sendResponse(res, 403, null, 'Unauthorized!');\n  } else if (userDetails[0].is_admin) {\n    const dateFromInput = tripDetails.tripDate;\n    const timeFromInput = tripDetails.tripTime;\n    const dateParts = dateFromInput.split('/');\n    const timeParts = timeFromInput.split(':');\n    const date = new Date(dateParts[2], dateParts[0] - 1,\n      dateParts[1], timeParts[0], timeParts[1]);\n    // const dateISO = date.toISOString();\n    if (!(date < new Date())) {\n      createTrip(tripDetails)\n        .then(() => {\n          sendResponse(res, 201, 'trip created', null);\n        }).catch(() => {\n          sendResponse(res, 500, null, 'Error.Ensure bus id is valid');\n        });\n    } else {\n      sendResponse(res, 405, null, 'This Date is not allowed');\n    }\n  } else {\n    sendResponse(res, 401, null, 'Unauthorized user!');\n  }\n});\n\ntripRouter.post('/:id', verifyToken, (req, res) => {\n  const { userDetails } = req.body;\n  const { id } = req.params;\n  const convertTripId = parseInt(id);\n  if (userDetails[0].is_admin && isPositiveInteger(convertTripId)) {\n    getTrip(convertTripId)\n      .then((result) => {\n        if (result.length > 0) {\n          if (result[0].status) {\n            cancelTrip(convertTripId)\n              .then(() => {\n                sendResponse(res, 202, 'Trip cancelled', null);\n              }).catch(() => {\n                sendResponse(res, 500, null, 'Internal server error');\n              });\n          } else {\n            sendResponse(res, 207, 'Trip already cancelled', 'null');\n          }\n        } else {\n          sendResponse(res, 400, 'null', 'Could not get trip');\n        }\n      }).catch(() => {\n        sendResponse(res, 500, null, 'Internal server error');\n      });\n  } else {\n    sendResponse(res, 401, null, 'Unauthorized!');\n  }\n});\n\n\nexport default tripRouter;\n"]}