{"version":3,"sources":["../../server/routes/bookings.js"],"names":["bookingRouter","express","Router","post","bookingValidate","verifyToken","req","res","body","userDetails","bookingInfo","userId","user_id","tripId","then","result","status","send","message","trip_id","trip_date","seat_number","seatNumber","first_name","last_name","email","user_email","catch","e","get","is_admin","length","data","delete","id","params","convertId","parseInt"],"mappings":"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","file":"bookings.js","sourcesContent":["import express from 'express';\nimport sendResponse from '../helpers/response';\nimport { bookingValidate, verifyToken } from '../helpers/validators';\nimport {\n  getTrip, bookingData,\n  adminAllBooking, userAllBooking,\n  getBooking, deleteBooking,\n} from '../crud/db';\n\nconst bookingRouter = express.Router();\n\nbookingRouter.post('/', bookingValidate, verifyToken, (req, res) => {\n  const { userDetails, bookingInfo } = req.body;\n  bookingInfo.userId = userDetails[0].user_id;\n  getTrip(bookingInfo.tripId)\n    .then((result) => {\n      if (result[0].status) {\n        bookingData(bookingInfo)\n          .then(() => {\n            res.status(202).send({\n              status: 202,\n              message: 'Booking successfully created',\n              user_id: userDetails[0].user_id,\n              trip_id: result[0].trip_id,\n              trip_date: result[0].trip_date,\n              seat_number: bookingInfo.seatNumber,\n              first_name: userDetails.first_name,\n              last_name: userDetails[0].last_name,\n              email: userDetails[0].user_email,\n            });\n          }).catch((e) => {\n            sendResponse(res, 500, null, e);\n          });\n      } else {\n        sendResponse(res, 406, null, 'Trip is currently cancelled');\n      }\n    }).catch(() => {\n      sendResponse(res, 404, null, 'Could not get trip Information');\n    });\n});\n\nbookingRouter.get('/', verifyToken, (req, res) => {\n  const { userDetails } = req.body;\n  if (userDetails[0].is_admin && userDetails[0].is_admin) {\n    adminAllBooking()\n      .then((result) => {\n        if (result.length > 0) {\n          res.status(200).send({\n            status: 200,\n            data: result,\n          });\n        } else {\n          sendResponse(res, 200, 'No booking recorded', null);\n        }\n      }).catch(() => sendResponse(res, 500, null, 'Internal server error'));\n  } else if (!userDetails[0].is_admin && !userDetails[0].is_admin) {\n    userAllBooking(userDetails[0].user_email)\n      .then((result) => {\n        if (result.length > 0) {\n          res.status(200).send({\n            status: 200,\n            data: result,\n          });\n        } else {\n          sendResponse(res, 200, 'No booking recorded', null);\n        }\n      }).catch(() => sendResponse(res, 500, null, 'Internal server error'));\n  } else {\n    sendResponse(res, 400, null, 'Request cannot be processed');\n  }\n});\n\nbookingRouter.delete('/:id', verifyToken, (req, res) => {\n  const { userDetails } = req.body;\n  const { id } = req.params;\n  const convertId = parseInt(id);\n  getBooking(userDetails[0].user_id, convertId)\n    .then((result) => {\n      if (result.length > 0) {\n        deleteBooking(userDetails[0].user_id, convertId)\n          .then(() => {\n            res.status(301).send({\n              status: 301,\n              message: 'Booking successfully deleted',\n            });\n          }).catch(() => sendResponse(res, 500, null, 'Internal server error'));\n      } else {\n        sendResponse(res, 404, null, 'No booking found');\n      }\n    }).catch(() => sendResponse(res, 500, null, 'Internal server error'));\n});\n\nexport default bookingRouter;\n"]}