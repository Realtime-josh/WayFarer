{"version":3,"sources":["../../server/test/function.test.js"],"names":["describe","it","res","les","bless","guess","toBe","firstCheck","secondCheck","thridCheck","fourthCheck","done","app","post","send","email","firstName","lastName","password","set","expect","end","err","body","error","toContain","status"],"mappings":"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","file":"function.test.js","sourcesContent":["import expect from 'expect';\r\nimport request from 'supertest';\r\nimport {\r\n  isPositiveInteger, trimAllSpace,\r\n  filterInput, isDateFormat, isTime\r\n} from '../helpers/validators';\r\nimport app from '../app';\r\n\r\ndescribe('function tests', () => {\r\n  it('should return a positive number', () => {\r\n    const res = isPositiveInteger(2);\r\n    const les = isPositiveInteger(1.09);\r\n    const bless = isPositiveInteger(-3);\r\n    const guess = isPositiveInteger('3');\r\n    expect(res).toBe(true);\r\n    expect(les).toBe(false);\r\n    expect(bless).toBe(false);\r\n    expect(guess).toBe(true);\r\n  });\r\n\r\n  it('should return correct time format', () => {\r\n    const res = isTime('120/12/2018');\r\n    const les = isTime('12:90023');\r\n    const bless = isTime('18:009');\r\n    const guess = isTime('12:30');\r\n    expect(res).toBe(false);\r\n    expect(les).toBe(false);\r\n    expect(bless).toBe(false);\r\n    expect(guess).toBe(true);\r\n  });\r\n\r\n  it('should return correct date format', () => {\r\n    const res = isDateFormat('120/12/2018');\r\n    const les = isDateFormat('32/84/40154');\r\n    const bless = isDateFormat('0983/3/3020');\r\n    const guess = isDateFormat('02/06/2019');\r\n    expect(res).toBe(false);\r\n    expect(les).toBe(false);\r\n    expect(bless).toBe(false);\r\n    expect(guess).toBe(true);\r\n  });\r\n\r\n\r\n  it('should trim all white spaces', () => {\r\n    const res = trimAllSpace('  kelvin    ');\r\n    const les = trimAllSpace('ma  r k ');\r\n    const bless = trimAllSpace('  j a  k  e');\r\n    const guess = trimAllSpace('Cla rke');\r\n    expect(res).toBe('kelvin');\r\n    expect(les).toBe('mark');\r\n    expect(bless).toBe('jake');\r\n    expect(guess).toBe('Clarke');\r\n  });\r\n\r\n  it('should flag special characters', () => {\r\n    const firstCheck = filterInput('ke   lvin    %');\r\n    const secondCheck = filterInput('ma  & r k ');\r\n    const thridCheck = filterInput('  j a <  k  e');\r\n    const fourthCheck = filterInput('Cla ~rke');\r\n    expect(firstCheck).toBe(true);\r\n    expect(secondCheck).toBe(true);\r\n    expect(thridCheck).toBe(true);\r\n    expect(fourthCheck).toBe(true);\r\n  });\r\n\r\n  it('should check email validity', (done) => {\r\n    request(app)\r\n      .post('/api/v1/auth/signup')\r\n      .send({\r\n        email: 'frankson#$%joshua@gmail.com',\r\n        firstName: 'Joshua',\r\n        lastName: 'Frankson',\r\n        password: 'jddhehndhr',\r\n      })\r\n      .set('Accept', 'application/json')\r\n      .expect(400)\r\n      .expect('Content-Type', /json/)\r\n      .end((err, res) => {\r\n        if (err) done(err);\r\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\r\n        expect(res.body.status).toBe(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should check firstName validity', (done) => {\r\n    request(app)\r\n      .post('/api/v1/auth/signup')\r\n      .send({\r\n        email: 'franksonjoshua@gmail.com',\r\n        firstName: 'Joshu%^$#@a',\r\n        lastName: 'Frankson',\r\n        password: 'jddhehndhr',\r\n      })\r\n      .set('Accept', 'application/json')\r\n      .expect(400)\r\n      .expect('Content-Type', /json/)\r\n      .end((err, res) => {\r\n        if (err) done(err);\r\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\r\n        expect(res.body.status).toBe(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('should check lastName validity', (done) => {\r\n    request(app)\r\n      .post('/api/v1/auth/signup')\r\n      .send({\r\n        email: 'franksonjoshua@gmail.com',\r\n        firstName: 'Joshua',\r\n        lastName: 'Fra$%#@nkson',\r\n        password: 'jddhehndhr',\r\n      })\r\n      .set('Accept', 'application/json')\r\n      .expect(400)\r\n      .expect('Content-Type', /json/)\r\n      .end((err, res) => {\r\n        if (err) done(err);\r\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\r\n        expect(res.body.status).toBe(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should check password length is greater than 6', (done) => {\r\n    request(app)\r\n      .post('/api/v1/auth/signup')\r\n      .send({\r\n        email: 'franksonjoshua@gmail.com',\r\n        firstName: 'Joshua',\r\n        lastName: 'Frankson',\r\n        password: 'jddh',\r\n      })\r\n      .set('Accept', 'application/json')\r\n      .expect(400)\r\n      .expect('Content-Type', /json/)\r\n      .end((err, res) => {\r\n        if (err) done(err);\r\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\r\n        expect(res.body.status).toBe(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n\r\n  it('should return length of first name greater than 1', (done) => {\r\n    request(app)\r\n      .post('/api/v1/auth/signup')\r\n      .send({\r\n        email: 'franksonjoshua@gmail.com',\r\n        firstName: ' ',\r\n        lastName: 'Frankson',\r\n        password: 'jddhej',\r\n      })\r\n      .set('Accept', 'application/json')\r\n      .expect(400)\r\n      .expect('Content-Type', /json/)\r\n      .end((err, res) => {\r\n        if (err) done(err);\r\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\r\n        expect(res.body.status).toBe(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should return length of lastName greater than 1', (done) => {\r\n    request(app)\r\n      .post('/api/v1/auth/signup')\r\n      .send({\r\n        email: 'franksonjoshua@gmail.com',\r\n        firstName: 'Joshua',\r\n        lastName: ' ',\r\n        password: 'jddhe',\r\n      })\r\n      .set('Accept', 'application/json')\r\n      .expect(400)\r\n      .expect('Content-Type', /json/)\r\n      .end((err, res) => {\r\n        if (err) done(err);\r\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\r\n        expect(res.body.status).toBe(400);\r\n      });\r\n    done();\r\n  });\r\n\r\n  it('should not return withspaces in names', (done) => {\r\n    request(app)\r\n      .post('/api/v1/auth/signup')\r\n      .send({\r\n        email: 'franksonjoshua@gmail.com',\r\n        firstName: '     ',\r\n        lastName: ' ',\r\n        password: 'jddhert',\r\n      })\r\n      .set('Accept', 'application/json')\r\n      .expect(400)\r\n      .expect('Content-Type', /json/)\r\n      .end((err, res) => {\r\n        if (err) done(err);\r\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\r\n        expect(res.body.status).toBe(400);\r\n      });\r\n    done();\r\n  });\r\n});\r\n"]}