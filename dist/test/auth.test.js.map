{"version":3,"sources":["../../server/test/auth.test.js"],"names":["describe","before","done","then","catch","e","it","app","post","send","firstName","lastName","email","password","set","expect","response","body","status","toBe","result","user_email","error","toContain","data","isAdmin","userId","toBeTruthy","console","log","end","err","res","toBeFalsy","is_admin","user_id"],"mappings":"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","file":"auth.test.js","sourcesContent":["import expect from 'expect';\nimport request from 'supertest';\nimport app from '../app';\nimport { getUserEmail, clearTable } from '../crud/db';\n\ndescribe('POST /auth', () => {\n  before((done) => {\n    clearTable()\n      .then(() => {\n        done();\n      })\n      .catch(e => done(e));\n  });\n  it('should create a new user', () => request(app)\n    .post('/api/v1/auth/signup')\n    .send({\n      firstName: 'Joshua',\n      lastName: 'Frankson',\n      email: 'joshuafrankson@gmail.com',\n      password: 'regarded',\n    })\n    .set('Accept', 'application/json')\n    .expect(201)\n    .then((response) => {\n      expect(response.body.status).toBe(201);\n      // ensure user is in database\n      getUserEmail('joshuafrankson@gmail.com')\n        .then((result) => {\n          expect(result[0].user_email).toBe('joshuafrankson@gmail.com');\n        });\n    }));\n\n  it('should not create a user twice', () => request(app)\n    .post('/api/v1/auth/signup')\n    .send({\n      firstName: 'Joshua',\n      lastName: 'Frankson',\n      email: 'joshuafrankson@gmail.com',\n      password: 'regarded',\n    })\n    .set('Accept', 'application/json')\n    .expect(401)\n    .then((response) => {\n      expect(response.body.status).toBe(401);\n      expect(response.body.error).toContain('User already signed up');\n    }));\n\n  it('should create an account and identify a non admin', () => request(app)\n    .post('/api/v1/auth/signup')\n    .send({\n      firstName: 'Mark',\n      lastName: 'Clarke',\n      email: 'markclarke@gmail.com',\n      password: 'history',\n    })\n    .set('Accept', 'application/json')\n    .expect(201)\n    .then((response) => {\n      expect(response.body.status).toBe(201);\n      expect(response.body.data.isAdmin).toBe(false);\n      expect(response.body.data.userId).toBeTruthy();\n      // ensure user is in database\n      getUserEmail('markclarke@gmail.com')\n        .then((result) => {\n          expect(result[0].user_email).toBe('markclarke@gmail.com');\n        }).catch(() => {\n          console.log('Bug found');\n        });\n    }));\n\n  it('should create an account and identify an admin', () => request(app)\n    .post('/api/v1/auth/signup')\n    .send({\n      firstName: 'Jacob',\n      lastName: 'Moore',\n      email: 'jaconmoore@wayfareradmin.com',\n      password: 'history',\n    })\n    .set('Accept', 'application/json')\n    .expect(201)\n    .then((response) => {\n      expect(response.body.status).toBe(201);\n      expect(response.body.data.isAdmin).toBe(true);\n      expect(response.body.data.userId).toBeTruthy();\n      // ensure user is in database\n      getUserEmail('jaconmoore@wayfareradmin.com')\n        .then((result) => {\n          expect(result[0].user_email).toBe('jaconmoore@wayfareradmin.com');\n        });\n    }));\n\n  it('should check that all input fields are filled correctly', (done) => {\n    request(app)\n      .post('/api/v1/auth/signup')\n      .send({\n        firstName: 'James',\n        lastName: 'Clown',\n        email: 'jamesclown@gmail.com',\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) done(err);\n        expect(res.body.status).toBe(400);\n        expect(res.body.isAdmin).toBeFalsy();\n        expect(res.body.error).toContain('Ensure that all fields are correctly filled out');\n      });\n    done();\n  });\n\n  it('should check for an invalid email', (done) => {\n    request(app)\n      .post('/api/v1/auth/signup')\n      .send({\n        firstName: 'James',\n        lastName: 'Clown',\n        email: 'jamesclowncorona.ysl',\n        password: 'heyheyhey',\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) done(err);\n        expect(res.body.status).toBe(400);\n        expect(res.body.isAdmin).toBeFalsy();\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\n      });\n    done();\n  });\n\n  it('should check for strong password', (done) => {\n    request(app)\n      .post('/api/v1/auth/signup')\n      .send({\n        firstName: 'James',\n        lastName: 'Clown',\n        email: 'jamesclown@gmail.com',\n        password: 'to',\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) done(err);\n        expect(res.body.status).toBe(400);\n        expect(res.body.isAdmin).toBeFalsy();\n        expect(res.body.error).toContain('Ensure username, email and password are valid entries');\n      });\n    done();\n  });\n\n  it('should check check for edge cases where input are not defined', (done) => {\n    request(app)\n      .post('/api/v1/auth/signup')\n      .send({\n        firstName: 'James',\n        lastName: 'Clown',\n        email: 'jamesclown@gmail.com',\n      })\n      .set('Accept', 'application/json')\n      .expect(400)\n      .expect('Content-Type', /json/)\n      .end((err, res) => {\n        if (err) done(err);\n        expect(res.body.status).toBe(400);\n        expect(res.body.isAdmin).toBeFalsy();\n        expect(res.body.error).toContain('Ensure that all fields are correctly filled out');\n      });\n    done();\n  });\n\n  it('should log in a registered user', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'joshuafrankson@gmail.com',\n      password: 'regarded',\n    })\n    .set('Accept', 'application/json')\n    .expect(202)\n    .then((response) => {\n      expect(response.body.status).toBe(202);\n    }));\n\n  it('should log in a registered user as non-admin', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'joshuafrankson@gmail.com',\n      password: 'regarded',\n    })\n    .set('Accept', 'application/json')\n    .expect(202)\n    .then((response) => {\n      expect(response.body.status).toBe(202);\n      expect(response.body.is_admin).toBeFalsy();\n    }));\n\n  it('should log in a registered user as non-admin and issue user id', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'joshuafrankson@gmail.com',\n      password: 'regarded',\n    })\n    .set('Accept', 'application/json')\n    .expect(202)\n    .then((response) => {\n      expect(response.body.status).toBe(202);\n      expect(response.body.is_admin).toBeFalsy();\n      expect(response.body.user_id).toBeTruthy();\n    }));\n\n  it('should log in an admin', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'jaconmoore@wayfareradmin.com',\n      password: 'history',\n    })\n    .set('Accept', 'application/json')\n    .expect(202)\n    .then((response) => {\n      expect(response.body.status).toBe(202);\n      expect(response.body.is_admin).toBeTruthy();\n    }));\n\n  it('should log in a registered user as admin and issue user id', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'jaconmoore@wayfareradmin.com',\n      password: 'history',\n    })\n    .set('Accept', 'application/json')\n    .expect(202)\n    .then((response) => {\n      expect(response.body.status).toBe(202);\n      expect(response.body.is_admin).toBeTruthy();\n      expect(response.body.user_id).toBeTruthy();\n    }));\n\n  it('should validate user password', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'jaconmoore@wayfareradmin.com',\n      password: 'historyjdf',\n    })\n    .set('Accept', 'application/json')\n    .expect(406)\n    .then((response) => {\n      expect(response.body.status).toBe(406);\n      expect(response.body.error).toContain('Password Incorrect');\n    }));\n\n  it('should not log in unregistered email', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'stephenjobs@yahoo.com',\n      password: 'historyjdf',\n    })\n    .set('Accept', 'application/json')\n    .expect(404)\n    .then((response) => {\n      expect(response.body.status).toBe(404);\n      expect(response.body.error).toContain('Email not registered');\n    }));\n\n  it('should validate email', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'stephenjobsyahoo.com',\n      password: 'historyjdf',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.status).toBe(400);\n      expect(response.body.error).toContain('Ensure email and password are valid entries');\n    }));\n\n  it('should validate email', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'stephenjobsyahoo.com',\n      password: 'historyjdf',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.status).toBe(400);\n      expect(response.body.error).toContain('Ensure email and password are valid entries');\n    }));\n\n  it('should ensure password length greater than 4', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'stephenjobsyahoo.com',\n      password: 'hi',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.status).toBe(400);\n      expect(response.body.error).toContain('Ensure email and password are valid entries');\n    }));\n\n  it('check for edge cases', () => request(app)\n    .post('/api/v1/auth/signin')\n    .send({\n      email: 'stephenjobsyahoo.com',\n    })\n    .set('Accept', 'application/json')\n    .expect(403)\n    .then((response) => {\n      expect(response.body.status).toBe(403);\n      expect(response.body.error).toContain('Invalid Input');\n    }));\n});\n"]}