{"version":3,"sources":["../../server/crud/db.js"],"names":["dotenv","config","connectionString","process","env","TEST_DATABASE_URL","NODE_ENV","DATABASE_URL","current_env","usersTable","tripsTable","bookingTable","getUserEmail","Promise","resolve","reject","client","Client","connect","then","sql","params","email","query","result","rows","end","catch","e","insertUsers","firstName","lastName","password","isAdmin","createTrip","details","busId","origin","destination","tripDate","tripTime","fare","getTrip","tripId","getAllTrips","adminAllBooking","userAllBooking","userEmail","bookingCheck","seatNumber","bookingData","data","userId","date","cancelTrip","clearTable","rowCount","clearTripTable","clearBookingTable","dummyTrip","status"],"mappings":"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","file":"db.js","sourcesContent":["import { Client } from 'pg';\nimport dotenv from 'dotenv';\n\ndotenv.config();\nlet connectionString;\nconnectionString = process.env.TEST_DATABASE_URL;\nconnectionString = process.env.TEST_DATABASE_URL;\nif (process.env.NODE_ENV === 'production') {\n  connectionString = process.env.DATABASE_URL;\n} else if (process.env.current_env === 'test') {\n  connectionString = process.env.TEST_DATABASE_URL;\n}\n\nconst usersTable = 'users';\nconst tripsTable = 'trips';\nconst bookingTable = 'bookings';\n\nconst getUserEmail = email => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT * FROM ${usersTable} WHERE user_email=$1`;\n      const params = [email];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst insertUsers = (firstName, lastName,\n  email, password, isAdmin) => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `INSERT INTO ${usersTable}(first_name,last_name,user_email,password,is_admin)VALUES($1,$2,$3,$4,$5)`;\n      const params = [firstName, lastName, email, password, isAdmin];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst createTrip = details => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `INSERT INTO ${tripsTable}\n      (bus_id,origin,destination,trip_date,trip_time,fare)VALUES($1,$2,$3,$4,$5,$6)`;\n      const params = [details.busId, details.origin,\n        details.destination, details.tripDate, details.tripTime, details.fare];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst getTrip = tripId => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT * FROM ${tripsTable} WHERE trip_id=$1`;\n      const params = [tripId];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst getAllTrips = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT * FROM ${tripsTable}`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rows);\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst adminAllBooking = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT ${bookingTable}.booking_id,${bookingTable}.trip_id,${bookingTable}.user_id,\n      ${bookingTable}.seat_number,${tripsTable}.trip_id,${usersTable}.first_name,\n      ${usersTable}.last_name,${usersTable}.user_email FROM ${bookingTable}, ${tripsTable}, ${usersTable} \n      WHERE ${bookingTable}.trip_id = ${tripsTable}.trip_id\n      AND ${bookingTable}.user_id=${usersTable}.user_id`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rows);\n        }).catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nconst userAllBooking = userEmail => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT ${bookingTable}.booking_id,${bookingTable}.trip_id,${bookingTable}.user_id,\n      ${bookingTable}.seat_number,${tripsTable}.trip_id,${usersTable}.first_name,\n      ${usersTable}.last_name,${usersTable}.user_email FROM ${bookingTable}, ${tripsTable}, ${usersTable} \n      WHERE ${bookingTable}.trip_id = ${tripsTable}.trip_id\n      AND ${bookingTable}.user_id=${usersTable}.user_id AND ${usersTable}.user_email=$1`;\n      const params = [userEmail];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n        }).catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nconst bookingCheck = (tripId, seatNumber) => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT * FROM ${bookingTable} WHERE trip_id=$1 AND seat_number=$2`;\n      const params = [tripId, seatNumber];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst bookingData = data => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `INSERT INTO ${bookingTable}(trip_id,user_id,created_on,seat_number)\n      VALUES($1,$2,$3,$4)`;\n      const params = [data.tripId, data.userId, data.date, data.seatNumber];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\n\nconst cancelTrip = tripId => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `UPDATE ${tripsTable} SET status=false WHERE trip_id=$1`;\n      const params = [tripId];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst clearTable = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `DELETE FROM ${usersTable};`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nconst clearTripTable = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `DELETE FROM ${tripsTable};`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nconst clearBookingTable = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `DELETE FROM ${bookingTable};`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nconst dummyTrip = (tripId, busId, origin, destination,\n  tripDate, tripTime, fare, status) => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `INSERT INTO trips\n      (trip_id,bus_id,origin,destination,trip_date,trip_time,fare,status)VALUES($1,$2,$3,$4,$5,$6,$7,$8)`;\n      const params = [tripId, busId, origin,\n        destination, tripDate, tripTime, fare, status];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\n\nexport {\n  getUserEmail, insertUsers, clearTable,\n  createTrip, getTrip, cancelTrip, clearTripTable,\n  getAllTrips, bookingCheck, bookingData, clearBookingTable,\n  adminAllBooking, userAllBooking, dummyTrip,\n};\n"]}