{"version":3,"sources":["../../server/crud/db.js"],"names":["dotenv","config","connectionString","process","env","TEST_DATABASE_URL","NODE_ENV","DATABASE_URL","usersTable","getUserEmail","email","Promise","resolve","reject","client","Client","connect","then","sql","params","query","result","rows","end","catch","e","insertUsers","firstName","lastName","password","isAdmin","clearTable","rowCount"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEAA,iBAAOC,MAAP;AACA;AACA,IAAIC,yBAAJ;AACAA,mBAAmBC,QAAQC,GAAR,CAAYC,iBAA/B;AACA,IAAIF,QAAQC,GAAR,CAAYE,QAAZ,KAAyB,YAA7B,EAA2C;AACzCJ,qBAAmBC,QAAQC,GAAR,CAAYG,YAA/B;AACD;;AAED,IAAMC,aAAa,cAAnB;AACA;AACA;AACA;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,SAAS,IAAIC,UAAJ,CAAWb,gBAAX,CAAf;AACAY,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAMC,yBAAuBV,UAAvB,yBAAN;AACA,UAAMW,SAAS,CAACT,KAAD,CAAf;AACAI,aAAOM,KAAP,CAAaF,GAAb,EAAkBC,MAAlB,EACGF,IADH,CACQ,UAACI,MAAD,EAAY;AAChBT,gBAAQS,OAAOC,IAAf;AACAR,eAAOS,GAAP;AACD,OAJH,EAIKC,KAJL,CAIW,UAACC,CAAD,EAAO;AACdZ,eAAOY,CAAP;AACD,OANH;AAOD,KAXH,EAWKD,KAXL,CAWW,UAACC,CAAD,EAAO;AACdZ,aAAOY,CAAP;AACD,KAbH;AAcD,GAhBM,CAAP;AAiBD,CAlBD;;AAoBA,IAAMC,cAAc,SAAdA,WAAc,CAACC,SAAD,EAAYC,QAAZ,EAClBlB,KADkB,EACXmB,QADW,EACDC,OADC;AAAA,SACW,IAAInB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC9D,QAAMC,SAAS,IAAIC,UAAJ,CAAWb,gBAAX,CAAf;AACAY,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAMC,uBAAqBV,UAArB,8EAAN;AACA,UAAMW,SAAS,CAACQ,SAAD,EAAYC,QAAZ,EAAsBlB,KAAtB,EAA6BmB,QAA7B,EAAuCC,OAAvC,CAAf;AACAhB,aAAOM,KAAP,CAAaF,GAAb,EAAkBC,MAAlB,EACGF,IADH,CACQ,UAACI,MAAD,EAAY;AAChBT,gBAAQS,OAAOC,IAAf;AACAR,eAAOS,GAAP;AACD,OAJH,EAIKC,KAJL,CAIW,UAACC,CAAD,EAAO;AACdZ,eAAOY,CAAP;AACD,OANH;AAOD,KAXH,EAWKD,KAXL,CAWW,UAACC,CAAD,EAAO;AACdZ,aAAOY,CAAP;AACD,KAbH;AAcD,GAhB8B,CADX;AAAA,CAApB;;AAmBA,IAAMM,aAAa,SAAbA,UAAa;AAAA,SAAM,IAAIpB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACxD,QAAMC,SAAS,IAAIC,UAAJ,CAAWb,gBAAX,CAAf;AACAY,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAMC,uBAAqBV,UAArB,MAAN;AACAM,aAAOM,KAAP,CAAaF,GAAb,EACGD,IADH,CACQ,UAACI,MAAD,EAAY;AAChBT,gBAAQS,OAAOW,QAAf;AACAlB,eAAOS,GAAP;AACD,OAJH,EAKGC,KALH,CAKS;AAAA,eAAKX,OAAOY,CAAP,CAAL;AAAA,OALT;AAMD,KATH,EASKD,KATL,CASW;AAAA,aAAKX,OAAOY,CAAP,CAAL;AAAA,KATX;AAUD,GAZwB,CAAN;AAAA,CAAnB;;QAcShB,Y,GAAAA,Y;QAAciB,W,GAAAA,W;QAAaK,U,GAAAA,U","file":"db.js","sourcesContent":["import { Client } from 'pg';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n// const env = process.env.NODE_ENV || 'development';\nlet connectionString;\nconnectionString = process.env.TEST_DATABASE_URL;\nif (process.env.NODE_ENV === 'production') {\n  connectionString = process.env.DATABASE_URL;\n}\n\nconst usersTable = 'user_account';\n// const busesTable = 'bus_account';\n// const tripTable = 'trip_account';\n// const bookingTable = 'booking_account';\n\nconst getUserEmail = (email) => {\n  return new Promise((resolve, reject) => {\n    const client = new Client(connectionString);\n    client.connect()\n      .then(() => {\n        const sql = `SELECT * FROM ${usersTable} WHERE user_email=$1`;\n        const params = [email];\n        client.query(sql, params)\n          .then((result) => {\n            resolve(result.rows);\n            client.end();\n          }).catch((e) => {\n            reject(e);\n          });\n      }).catch((e) => {\n        reject(e);\n      });\n  });\n};\n\nconst insertUsers = (firstName, lastName,\n  email, password, isAdmin) => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `INSERT INTO ${usersTable}(first_name,last_name,user_email,password,is_admin)VALUES($1,$2,$3,$4,$5)`;\n      const params = [firstName, lastName, email, password, isAdmin];\n      client.query(sql, params)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        }).catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst clearTable = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `DELETE FROM ${usersTable};`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nexport { getUserEmail, insertUsers, clearTable };\n"]}