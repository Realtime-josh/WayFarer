{"version":3,"sources":["../../server/crud/db.js"],"names":["dotenv","config","connectionString","process","env","TEST_DATABASE_URL","NODE_ENV","DATABASE_URL","current_env","usersTable","tripsTable","getUserEmail","Promise","resolve","reject","client","Client","connect","then","sql","params","email","query","result","rows","end","catch","e","insertUsers","firstName","lastName","password","isAdmin","createTrip","details","busId","origin","destination","tripDate","tripTime","fare","getTrip","tripId","cancelTrip","clearTable","rowCount","clearTripTable"],"mappings":"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","file":"db.js","sourcesContent":["import { Client } from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\nlet connectionString;\r\nconnectionString = process.env.TEST_DATABASE_URL;\r\nconnectionString = process.env.TEST_DATABASE_URL;\r\nif (process.env.NODE_ENV === 'production') {\r\n  connectionString = process.env.DATABASE_URL;\r\n} else if (process.env.current_env === 'test') {\r\n  connectionString = process.env.TEST_DATABASE_URL;\r\n}\r\n\r\nconst usersTable = 'users';\r\nconst tripsTable = 'trips';\r\n// const bookingTable = 'bookings';\r\n\r\nconst getUserEmail = email => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `SELECT * FROM ${usersTable} WHERE user_email=$1`;\r\n      const params = [email];\r\n      client.query(sql, params)\r\n        .then((result) => {\r\n          resolve(result.rows);\r\n          client.end();\r\n        }).catch((e) => {\r\n          reject(e);\r\n        });\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n});\r\n\r\nconst insertUsers = (firstName, lastName,\r\n  email, password, isAdmin) => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `INSERT INTO ${usersTable}(first_name,last_name,user_email,password,is_admin)VALUES($1,$2,$3,$4,$5)`;\r\n      const params = [firstName, lastName, email, password, isAdmin];\r\n      client.query(sql, params)\r\n        .then((result) => {\r\n          resolve(result.rows);\r\n          client.end();\r\n        }).catch((e) => {\r\n          reject(e);\r\n        });\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n});\r\n\r\nconst createTrip = details => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `INSERT INTO ${tripsTable}\r\n      (bus_id,origin,destination,trip_date,trip_time,fare)VALUES($1,$2,$3,$4,$5,$6)`;\r\n      const params = [details.busId, details.origin,\r\n        details.destination, details.tripDate, details.tripTime, details.fare];\r\n      client.query(sql, params)\r\n        .then((result) => {\r\n          resolve(result.rows);\r\n          client.end();\r\n        }).catch((e) => {\r\n          reject(e);\r\n        });\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n});\r\n\r\nconst getTrip = tripId => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `SELECT * FROM ${tripsTable} WHERE trip_id=$1`;\r\n      const params = [tripId];\r\n      client.query(sql, params)\r\n        .then((result) => {\r\n          resolve(result.rows);\r\n          client.end();\r\n        }).catch((e) => {\r\n          reject(e);\r\n        });\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n});\r\n\r\nconst cancelTrip = tripId => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `UPDATE ${tripsTable} SET status=false WHERE trip_id=$1`;\r\n      const params = [tripId];\r\n      client.query(sql, params)\r\n        .then((result) => {\r\n          resolve(result.rows);\r\n          client.end();\r\n        }).catch((e) => {\r\n          reject(e);\r\n        });\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n});\r\n\r\nconst clearTable = () => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `DELETE FROM ${usersTable};`;\r\n      client.query(sql)\r\n        .then((result) => {\r\n          resolve(result.rowCount);\r\n          client.end();\r\n        })\r\n        .catch(e => reject(e));\r\n    }).catch(e => reject(e));\r\n});\r\n\r\nconst clearTripTable = () => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `DELETE FROM ${tripsTable};`;\r\n      client.query(sql)\r\n        .then((result) => {\r\n          resolve(result.rowCount);\r\n          client.end();\r\n        })\r\n        .catch(e => reject(e));\r\n    }).catch(e => reject(e));\r\n});\r\n\r\n\r\nexport {\r\n  getUserEmail, insertUsers,\r\n  clearTable, createTrip, getTrip, cancelTrip, clearTripTable,\r\n};\r\n"]}