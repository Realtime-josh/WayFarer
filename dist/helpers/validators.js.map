{"version":3,"sources":["../../server/helpers/validators.js"],"names":["dotenv","config","isPositiveInteger","test","s","filterInput","input","pattern","result","atAdminMail","match","trimAllSpace","str","replace","validateUserSignup","req","res","next","body","email","firstName","lastName","password","trimFirstName","trimLastName","trimEmail","validator","isEmail","length","payload","token","jwt","sign","process","env","SECRET_KEY","returnedData","then","hashedPassword","bcrypt","genSalt","err","salt","hash","data","userId","user_id","isAdmin","is_admin","catch","feedback","validateUserSignIn","compare","first_name","last_name","user_email"],"mappings":"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","file":"validators.js","sourcesContent":["import validator from 'validator';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport dotenv from 'dotenv';\nimport sendResponse from './response';\nimport { getUserEmail, insertUsers } from '../crud/db';\n\n\ndotenv.config();\n\nconst isPositiveInteger = s => /^\\+?[1-9][\\d]*$/.test(s);\n\nconst filterInput = (input) => {\n  const pattern = /[~!#$%^&*()+={}:'\"<>?;',]/;\n  const result = pattern.test(input);\n  return result;\n};\n\nconst atAdminMail = (input) => {\n  const result = input.match(/(\\b@wayfareradmin.com\\b)(?!.*\\b\\1\\b)/g);\n  if (result === null) {\n    return false;\n  }\n  return true;\n};\n\nconst trimAllSpace = str => str.replace(/\\s+/g, '');\n\nconst validateUserSignup = (req, res, next) => {\n  const {\n    email,\n    firstName,\n    lastName,\n    password,\n  } = req.body;\n  if (typeof email === 'undefined' || typeof firstName === 'undefined' || typeof lastName === 'undefined'\n  || typeof password === 'undefined') {\n    sendResponse(res, 400, null, 'Ensure that all fields are correctly filled out');\n  } else {\n    const trimFirstName = trimAllSpace(firstName);\n    const trimLastName = trimAllSpace(lastName);\n    const trimEmail = trimAllSpace(email);\n    if (validator.isEmail(email) && !filterInput(trimFirstName) && trimFirstName.length > 2\n      && !filterInput(trimLastName) && trimLastName.length > 2\n      && !filterInput(trimEmail) && password.length > 5) {\n      const {\n        firstName,\n        lastName,\n        email,\n        password,\n      } = req.body;\n      const payload = {\n        firstName,\n        lastName,\n        email,\n      };\n      const token = jwt.sign(payload, process.env.SECRET_KEY);\n      const returnedData = {};\n      req.token = token;\n      getUserEmail(email)\n        .then((result) => {\n          if (result.length > 0) {\n            sendResponse(res, 401, null, 'User already signed up');\n          } else {\n            const hashedPassword = bcrypt.genSalt(10, (err, salt) => {\n              bcrypt.hash(password, salt, (err, hash) => {\n                if (atAdminMail(email)) {\n                  insertUsers(firstName, lastName, email, hash, true)\n                    .then(() => {\n                      getUserEmail(email)\n                        .then((data) => {\n                          returnedData.userId = data[0].user_id;\n                          returnedData.isAdmin = data[0].is_admin;\n                          req.returnedData = returnedData;\n                          next();\n                        }).catch(() => {\n                          sendResponse(res, 500, null, 'Internal Server Error');\n                        });\n                    }).catch(() => {\n                      sendResponse(res, 500, null, 'Internal Server Error');\n                    });\n                } else {\n                  insertUsers(firstName, lastName, email, hash, false)\n                    .then(() => {\n                      getUserEmail(email)\n                        .then((feedback) => {\n                          returnedData.userId = feedback[0].user_id;\n                          returnedData.isAdmin = feedback[0].is_admin;\n                          req.returnedData = returnedData;\n                          next();\n                        }).catch(() => {\n                          sendResponse(res, 500, null, 'Internal Server Error');\n                        });\n                    }).catch(() => {\n                      sendResponse(res, 500, null, 'Internal Server Error');\n                    });\n                }\n              });\n            });\n          }\n        }).catch(() => {\n          sendResponse(res, 500, null, 'Internal Server Error');\n        });\n    } else {\n      sendResponse(res, 400, null, 'Ensure username, email and password are valid entries');\n    }\n  }\n};\n\nconst validateUserSignIn = (req, res, next) => {\n  const { email, password } = req.body;\n  if (typeof email === 'undefined' || typeof password === 'undefined') {\n    sendResponse(res, 403, null, 'Invalid Input');\n  } else {\n    const trimEmail = trimAllSpace(email);\n    if (validator.isEmail(email) && !filterInput(trimEmail) && password.length > 4) {\n      getUserEmail(email)\n        .then((result) => {\n          bcrypt.compare(password, result[0].password, (err, data) => {\n            if (!data) {\n              sendResponse(res, 406, null, 'Password Incorrect');\n            } else {\n              const payload = {};\n              payload.userId = result[0].user_id;\n              payload.firstName = result[0].first_name;\n              payload.lastName = result[0].last_name;\n              payload.email = result[0].user_email;\n              payload.isAdmin = result[0].is_admin;\n              req.payload = payload;\n              next();\n            }\n          });\n        }).catch(() => {\n          sendResponse(res, 404, null, 'Email not registered');\n        });\n    } else {\n      sendResponse(res, 400, null, 'Ensure email and password are valid entries');\n    }\n  }\n};\n\n// const verifyToken = (req, res, next) => {\n//   const bearerHeader = req.get('Authorization');\n//   if (typeof bearerHeader !== 'undefined') {\n//     const splitBearerHeader = bearerHeader.split(' ');\n//     const token = splitBearerHeader[1];\n//     jwt.verify(token, process.env.SECRET_KEY, (err, data) => {\n//       if (err) {\n//         sendResponse(res, 400, null, 'authentication failed!');\n//       } else {\n//         const decrypt = data;\n//         req.body.decrypted = decrypt;\n//         getUserEmail(req.body.decrypted.email)\n//           .then((result) => {\n//             req.body.userDetails = result;\n//             next();\n//           })\n//           .catch(() => {\n//             sendResponse(res, 403, null, 'Invalid user');\n//           });\n//       }\n//     });\n//   } else {\n//     sendResponse(res, 404, null, 'Cannot authenticate user');\n//   }\n// };\n\n\nexport {\n  validateUserSignup, isPositiveInteger,\n  filterInput, atAdminMail, trimAllSpace,\n  validateUserSignIn,\n};\n"]}